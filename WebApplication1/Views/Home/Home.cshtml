@{
    ViewData["Title"] = "Home";
}
<header>
    <div class="header">
        <div class="header_title">  
            What2Eat
        </div>
    </div>
    <div class="top_nav">
        <a class="active" asp-area="" asp-controller="Home" asp-action="Home">Home</a>
        <a asp-area="" asp-controller="Home" asp-action="Discussion">Discussion</a>
    </div>
</header>

<body>
    <div class="flex-container">
        <div class="flex-child">
            <table style="width:100%";>
                <tr>
                    <th>
                        <h1>Meal Decision Wheel</h1>
                        <h2 id="day"></h2>
                    </th>
                </tr>
                <tr>
                    <th>
                        <input type="button" class="spin_wheel_btn" value="spin" id='spin' />
                    </th>
                </tr>
                <tr>
                    <th>
                        <canvas id="canvas" width="500" height="500"></canvas>
                    </th>
                </tr>
            </table>
        </div>

        <div class="flex-child">
            <div class="overlay">
                <canvas id="world"></canvas>
                <h1 id="winner"></h1>
                <svg id="close" aria-hidden="true" data-prefix="far" data-icon="times" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="svg-inline--fa fa-times fa-w-10 fa-3x"><path fill="white" d="M207.6 256l107.72-107.72c6.23-6.23 6.23-16.34 0-22.58l-25.03-25.03c-6.23-6.23-16.34-6.23-22.58 0L160 208.4 52.28 100.68c-6.23-6.23-16.34-6.23-22.58 0L4.68 125.7c-6.23 6.23-6.23 16.34 0 22.58L112.4 256 4.68 363.72c-6.23 6.23-6.23 16.34 0 22.58l25.03 25.03c6.23 6.23 16.34 6.23 22.58 0L160 303.6l107.72 107.72c6.23 6.23 16.34 6.23 22.58 0l25.03-25.03c6.23-6.23 6.23-16.34 0-22.58L207.6 256z" class=""></path></svg>
            </div>
            <header>
                <div class="namepicker">
                    <h1>Your Choice</h1>
                    <p>Enter your choices:</p>
                    <input id="names" type="text" placeholder="Each choice followed by a ‘ , ‘">
                    <a href="#" id="pick">Start Picking</a>
                </div>
          </header>
        </div>
    </div>
</body>

<footer>
    <div class="footer">
        <div class="footer_title">  
            <h2>What2Eat</h2>
            Bachelor of Computer Science<br>
            An Object Oriented Programming Project,Session of 2022/23
        </div>
    </div>
</footer>
        
@section Scripts{
<script>  
    class Morning  
      {  
         display()  
        {  
          return "Good Morning! Breakfast?";  
        }  
      }  
    class Afternoon
      {  
        display()  
        {  
          return "Good Afternoon! Take a break!";   
        }  
      }  
    class Evening extends Morning
      {  
        display()  
        {  
          return "Good Evening! Enjoy!";  
        }  
      }  
  
     morning = new Morning() ;
     afternoon = new Afternoon() ;
     evening = new Evening() ;

    const timeoftheday = new Date().getHours();

    if (timeoftheday <= 11) {
        document.getElementById("day").innerHTML = morning.display();  
    } else if (timeoftheday <= 17) {
        document.getElementById("day").innerHTML = afternoon.display();
    } else {
       document.getElementById("day").innerHTML = evening.display();
    }

    //Decision Wheel
    const time = new Date().getHours();

    if (time <= 11) {
        var options = ["Kampua","Laksa","Kolo Mee","Chicken Rice","Skip a meal"];
    } else if (time <= 17) {
        var options = ["Sugarbun","kfc","pizzahut","McDonalds"];
    } else {     
        var options = ["Steak","Spaghetti","Burger"];
    }

    var startAngle = 0;
    var arc = Math.PI / (options.length / 2);
    var spinTimeout = null;

    var spinArcStart = 10;
    var spinTime = 0;
    var spinTimeTotal = 0;

    var ctx;

    document.getElementById("spin").addEventListener("click", spin);

    function byte2Hex(n) {
      var nybHexString = "0123456789ABCDEF";
      return String(nybHexString.substr((n >> 4) & 0x0F,1)) + nybHexString.substr(n & 0x0F,1);
    }

    function RGB2Color(r,g,b) {
	    return '#' + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);
    }

    function getColor(item, maxitem) {
      var phase = 0;
      var center = 128;
      var width = 127;
      var frequency = Math.PI*2/maxitem;
  
      red   = Math.sin(frequency*item+2+phase) * width + center;
      green = Math.sin(frequency*item+0+phase) * width + center;
      blue  = Math.sin(frequency*item+4+phase) * width + center;
  
      return RGB2Color(red,green,blue);
    }

    function drawRouletteWheel() {
      var canvas = document.getElementById("canvas");
      if (canvas.getContext) {
        var outsideRadius = 200;
        var textRadius = 160;
        var insideRadius = 125;

        ctx = canvas.getContext("2d");
        ctx.clearRect(0,0,500,500);

        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;

        ctx.font = 'bold 12px Helvetica, Arial';

        for(var i = 0; i < options.length; i++) {
          var angle = startAngle + i * arc;
          ctx.fillStyle = getColor(i, options.length);

          ctx.beginPath();
          ctx.arc(250, 250, outsideRadius, angle, angle + arc, false);
          ctx.arc(250, 250, insideRadius, angle + arc, angle, true);
          ctx.stroke();
          ctx.fill();

          ctx.save();
          ctx.shadowOffsetX = -1;
          ctx.shadowOffsetY = -1;
          ctx.shadowBlur    = 0;
          ctx.shadowColor   = "rgb(220,220,220)";
          ctx.fillStyle = "black";
          ctx.translate(250 + Math.cos(angle + arc / 2) * textRadius, 
                        250 + Math.sin(angle + arc / 2) * textRadius);
          ctx.rotate(angle + arc / 2 + Math.PI / 2);
          var text = options[i];
          ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
          ctx.restore();
        } 

        //Arrow
        ctx.fillStyle = "black";
        ctx.beginPath();
        ctx.moveTo(250 - 4, 250 - (outsideRadius + 5));
        ctx.lineTo(250 + 4, 250 - (outsideRadius + 5));
        ctx.lineTo(250 + 4, 250 - (outsideRadius - 5));
        ctx.lineTo(250 + 9, 250 - (outsideRadius - 5));
        ctx.lineTo(250 + 0, 250 - (outsideRadius - 13));
        ctx.lineTo(250 - 9, 250 - (outsideRadius - 5));
        ctx.lineTo(250 - 4, 250 - (outsideRadius - 5));
        ctx.lineTo(250 - 4, 250 - (outsideRadius + 5));
        ctx.fill();
      }
    }

    function spin() {
      spinAngleStart = Math.random() * 10 + 10;
      spinTime = 0;
      spinTimeTotal = Math.random() * 3 + 4 * 1000;
      rotateWheel();
    }

    function rotateWheel() {
      spinTime += 30;
      if(spinTime >= spinTimeTotal) {
        stopRotateWheel();
        return;
      }
      var spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
      startAngle += (spinAngle * Math.PI / 180);
      drawRouletteWheel();
      spinTimeout = setTimeout('rotateWheel()', 30);
    }

    function stopRotateWheel() {
      clearTimeout(spinTimeout);
      var degrees = startAngle * 180 / Math.PI + 90;
      var arcd = arc * 180 / Math.PI;
      var index = Math.floor((360 - degrees % 360) / arcd);
      ctx.save();
      ctx.font = 'bold 30px Helvetica, Arial';
      var text = options[index]
      ctx.fillText(text, 250 - ctx.measureText(text).width / 2, 250 + 10);
      ctx.restore();
    }

    function easeOut(t, b, c, d) {
      var ts = (t/=d)*t;
      var tc = ts*t;
      return b+c*(tc + -3*ts + 3*t);
    }

    drawRouletteWheel();

    //Randome Name Generator
    var nameArray = [];

    $("#pick").click(function() {
    // Get the input value
    var names = document.getElementById("names").value;
  
    // Seperate the names and push them into the array
    var nameArray = names.split(',');
  
    // Get a random name, the winner
    var winner = nameArray[Math.floor(Math.random()*nameArray.length)];
  
    winner = "🎉" + " " + winner + " " + "🎉";
  
    // Display winner
    $("#world").addClass("open");
    $("#winner").addClass("open");
    $("#close").addClass("open");
    $("#winner").text(winner);
    });
  
    $("#close").click(function() {
    $("#world").removeClass("open");
    $("#winner").removeClass("open");
    $("#close").removeClass("open");
    });

    // Confetti
    (function() {
    var COLORS, Confetti, NUM_CONFETTI, PI_2, canvas, confetti, context, drawCircle, i, range, resizeWindow, xpos;

    NUM_CONFETTI = 350;

    COLORS = [[85, 71, 106], [174, 61, 99], [219, 56, 83], [244, 92, 68], [248, 182, 70]];

    PI_2 = 2 * Math.PI;

    canvas = document.getElementById("world");

    context = canvas.getContext("2d");

    window.w = 0;

    window.h = 0;

    resizeWindow = function() {
    window.w = canvas.width = window.innerWidth;
    return window.h = canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', resizeWindow, false);

    window.onload = function() {
    return setTimeout(resizeWindow, 0);
    };

    range = function(a, b) {
    return (b - a) * Math.random() + a;
    };

    drawCircle = function(x, y, r, style) {
    context.beginPath();
    context.arc(x, y, r, 0, PI_2, false);
    context.fillStyle = style;
    return context.fill();
    };

    xpos = 0.5;

    document.onmousemove = function(e) {
    return xpos = e.pageX / w;
    };

    window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return window.setTimeout(callback, 1000 / 60);
    };
    })();

    Confetti = class Confetti {
    constructor() {
        this.style = COLORS[~~range(0, 5)];
        this.rgb = `rgba(${this.style[0]},${this.style[1]},${this.style[2]}`;
        this.r = ~~range(2, 6);
        this.r2 = 2 * this.r;
        this.replace();
    }

    replace() {
        this.opacity = 0;
        this.dop = 0.03 * range(1, 4);
        this.x = range(-this.r2, w - this.r2);
        this.y = range(-20, h - this.r2);
        this.xmax = w - this.r;
        this.ymax = h - this.r;
        this.vx = range(0, 2) + 8 * xpos - 5;
        return this.vy = 0.7 * this.r + range(-1, 1);
    }

    draw() {
        var ref;
        this.x += this.vx;
        this.y += this.vy;
        this.opacity += this.dop;
        if (this.opacity > 1) {
        this.opacity = 1;
        this.dop *= -1;
        }
        if (this.opacity < 0 || this.y > this.ymax) {
        this.replace();
        }
        if (!((0 < (ref = this.x) && ref < this.xmax))) {
        this.x = (this.x + this.xmax) % this.xmax;
        }
        return drawCircle(~~this.x, ~~this.y, this.r, `${this.rgb},${this.opacity})`);
    }

    };

    confetti = (function() {
    var j, ref, results;
    results = [];
    for (i = j = 1, ref = NUM_CONFETTI; (1 <= ref ? j <= ref : j >= ref); i = 1 <= ref ? ++j : --j) {
        results.push(new Confetti);
    }
    return results;
    })();

    window.step = function() {
    var c, j, len, results;
    requestAnimationFrame(step);
    context.clearRect(0, 0, w, h);
    results = [];
    for (j = 0, len = confetti.length; j < len; j++) {
        c = confetti[j];
        results.push(c.draw());
    }
    return results;
    };

    step();

    }).call(this);

</script>
}
